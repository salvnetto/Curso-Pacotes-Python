{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Criação de Bibliotecas em Python\"\n",
        "format: \n",
        "  revealjs:\n",
        "    embed-resources: true\n",
        "    theme: fabio.scss\n",
        "    slide-number: c/t\n",
        "    code-line-numbers: true\n",
        "    incremental: false\n",
        "    transition: fade\n",
        "    progress: true\n",
        "    background-transition: fade\n",
        "    transition-speed: slow\n",
        "callout-appearance: simple\n",
        "editor: visual\n",
        "---\n",
        "\n",
        "\n",
        "<style>\n",
        "  .reveal {\n",
        "    font-size: 34px;\n",
        "  }\n",
        "</style>\n",
        "\n",
        "# Introdução\n",
        "\n",
        "## O Que São Bibliotecas ou Pacotes?\n",
        "\n",
        "Bibliotecas ou pacotes são ferramentas essenciais para encapsular código reutilizável, permitindo o compartilhamento e a utilização em diversos projetos.\n",
        "\n",
        "-   **Reutilização**\n",
        "\n",
        "-   **Manutenção**\n",
        "\n",
        "-   **Colaboração**\n",
        "\n",
        "-   **Organização**\n",
        "\n",
        "# Planejamento da Biblioteca\n",
        "\n",
        "## Etapas do Planejamento\n",
        "\n",
        "1.  **Defina o objetivo da biblioteca:** O que você pretende alcançar com sua biblioteca?\n",
        "2.  **Liste as principais funcionalidades:** Quais são os recursos que a biblioteca deve oferecer?\n",
        "3.  **Planeje a estrutura de módulos e pacotes:** Como você irá organizar o código?\n",
        "\n",
        "# Configuração do Ambiente\n",
        "\n",
        "## Github\n",
        "\n",
        "Diretório para o Github do curso:\n",
        "\n",
        "github.com/salvnetto/Curso-Pacotes-Python\n",
        "\n",
        "## Passos para Configuração\n",
        "\n",
        "1.  **Criar e Abrir um Diretório** \n",
        "2.  **Criar Ambiente Virtual:**\n",
        "\n",
        "``` bash\n",
        "python -m venv env\n",
        "```\n",
        "\n",
        "3.  **Ativar o Ambiente Virtual:**\n",
        "\n",
        "``` bash\n",
        "env\\Scripts\\activate\n",
        "```\n",
        "\n",
        "::: callout-important\n",
        "No Windows, pode ser necessário habilitar a \"política de execução\". Você pode fazer isso emitindo o seguinte comando no Terminal:\n",
        "``` bash\n",
        "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n",
        "```\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "Mais informações: [Guia Completo para Usar o Virtual Environment (venv) no Python](https://dev.to/franciscojdsjr/guia-completo-para-usar-o-virtual-environment-venv-no-python-57bo)\n",
        "\n",
        "# Estrutura de Diretórios\n",
        "\n",
        "``` bash\n",
        "minha_biblioteca/\n",
        "├── minha_biblioteca/\n",
        "│   ├── __init__.py\n",
        "│   ├── modulo1.py\n",
        "├── tests/\n",
        "├── README.md\n",
        "├── setup.py\n",
        "├── LICENSE\n",
        "```\n",
        "\n",
        "-   **minha_biblioteca/**: Contém o código principal da biblioteca.\n",
        "\n",
        "-   **tests/**: Diretório dedicado a testes unitários e integração.\n",
        "\n",
        "-   **README.md**: Documentação clara e abrangente da biblioteca.\n",
        "\n",
        "-   **setup.py**: Arquivo de configuração para a instalação da biblioteca.\n",
        "\n",
        "-   **LICENSE**: Licença que rege o uso do seu pacote.\n",
        "\n",
        "Mais informações sobre Licenças: [Choose a License](https://choosealicense.com/)\n",
        "\n",
        "## Inicializando o diretorio\n",
        "\n",
        "Precisamos inicializar o PYTHONPATH para permitir que o Python encontre nossa biblioteca:\n",
        "\n",
        "```bash\n",
        "$env:PYTHONPATH = \"caminho\\para\\seu\\diretorio\\minha_biblioteca\"\n",
        "```\n",
        "\n",
        "# Implementação\n",
        "\n",
        "## Criação de Funções e Classes\n",
        "\n",
        "Desenvolva suas funções e classes nos módulos. Mantenha a simplicidade e clareza no código:\n",
        "\n",
        "``` python\n",
        "def saudacao(nome):\n",
        "    return f\"Olá, {nome}!\"\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Docstrings\n",
        "\n",
        "Documente sua função para o usuário final:\n",
        "\n",
        "``` python\n",
        "def saudacao(nome: string) -> string:\n",
        "    \"\"\"\n",
        "    Faz uma saudação ao usuário.\n",
        "\n",
        "    Args:\n",
        "        nome (string): O primeiro número.\n",
        "\n",
        "    Returns:\n",
        "        string: Uma saudação com o nome inserido.\n",
        "    \"\"\"\n",
        "    return f\"Olá, {nome}!\"\n",
        "```\n",
        "\n",
        "Mais informações: [Google Docstrings](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings)\n",
        "\n",
        "## Exportação de Funções\n",
        "\n",
        "Exporte funções no `__init__.py` para facilitar o acesso aos usuários da biblioteca:\n",
        "\n",
        "``` python\n",
        "from minha_biblioteca.modulo1 import saudacao\n",
        "\n",
        "__all__ = ['saudacao']\n",
        "```\n",
        "\n",
        "## Dependências\n",
        "\n",
        "Se houver dependências, devemos instalá-las no ambiente virtual:\n",
        "\n",
        "```bash\n",
        "pip install numpy\n",
        "```\n",
        "\n",
        "Implementar:\n",
        "\n",
        "```python\n",
        "import numpy as np\n",
        "\n",
        "def soma(x, y):\n",
        "    return np.add(x, y)\n",
        "```\n",
        "\n",
        "E em seguida, gerar nosso arquivo de requisitos:\n",
        "\n",
        "```bash\n",
        "pip freeze > requirements.txt\n",
        "```\n",
        "\n",
        "\n",
        "## Arquivo `setup.py`\n",
        "\n",
        "Configure a instalação da biblioteca, assegurando que as dependências estejam corretamente especificadas:\n"
      ],
      "id": "439c3c12"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from setuptools import setup, find_packages\n",
        "\n",
        "setup(\n",
        "    name='minha_biblioteca',\n",
        "    version='0.1.0',\n",
        "    packages=find_packages(),\n",
        "    install_requires=['pandas'],  # Dependências da biblioteca\n",
        "    description='Uma biblioteca de exemplo para manipulação de dados',\n",
        "    long_description=open('README.md').read(),\n",
        "    long_description_content_type='text/markdown',\n",
        "    author='Seu Nome',\n",
        "    author_email='seu_email@example.com',\n",
        "    url='https://github.com/seu_usuario/minha_biblioteca',\n",
        "    classifiers=[\n",
        "        'Programming Language :: Python :: 3',\n",
        "        'License :: OSI Approved :: MIT License',\n",
        "    ],\n",
        "    python_requires='>=3.6',\n",
        ")"
      ],
      "id": "35749338",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Mais informações sobre os Classifiers: [Classifier Pypi](https://pypi.org/classifiers/)\n",
        "\n",
        "# Testes\n",
        "\n",
        "## Importância dos Testes\n",
        "\n",
        "Escrever testes unitários é crucial para garantir a funcionalidade e a confiabilidade da biblioteca:\n",
        "\n",
        "``` python\n",
        "import unittest\n",
        "from minha_biblioteca.modulo1 import saudacao\n",
        "\n",
        "class TestSaudacao(unittest.TestCase):\n",
        "    def test_saudacao(self):\n",
        "        self.assertEqual(saudacao(\"Salvador\"), \"Olá, Salvador!\")\n",
        "```\n",
        "\n",
        "# Documentação e Distribuição\n",
        "\n",
        "## Estrutura do README\n",
        "\n",
        "Um README bem estruturado é vital para facilitar a adoção da sua biblioteca:\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "![](img/readme_raw.png)\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](img/readme.png)\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Distribuição no PyPI\n",
        "\n",
        "### Passos para Distribuição\n",
        "\n",
        "-   **Gerar o pacote:** Utilize o comando para criar um pacote instalável.\n",
        "\n",
        "``` bash\n",
        "python -m build\n",
        "```\n",
        "\n",
        "-   **Publicar no PyPI:** Faça a publicação da sua biblioteca, tornando-a acessível para outros usuários.\n",
        "\n",
        "``` bash\n",
        "twine upload dist/*\n",
        "```\n",
        "\n",
        "# Conclusão\n",
        "\n",
        "## Dicas Finais para um Desenvolvimento Eficiente\n",
        "\n",
        "-   Mantenha o código limpo e comentado.\n",
        "-   Utilize controle de versão (Git) para rastrear mudanças.\n",
        "-   Incentive feedback e colabore com a comunidade.\n",
        "-   Documente sua biblioteca para facilitar a utilização por outros desenvolvedores.\n",
        "\n",
        "# Perguntas?"
      ],
      "id": "e888dc35"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Salvador Netto\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}