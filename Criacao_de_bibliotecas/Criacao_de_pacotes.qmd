---
title: "Criação de Bibliotecas em Python"
format: 
  revealjs:
    embed-resources: true
    theme: fabio.scss
    slide-number: c/t
    code-line-numbers: true
    incremental: false
    transition: fade
    progress: true
    background-transition: fade
    transition-speed: slow
callout-appearance: simple
editor: visual
---

<style>
  .reveal {
    font-size: 34px;
  }
</style>

# Introdução

## O Que São Bibliotecas ou Pacotes?

Bibliotecas ou pacotes são ferramentas essenciais para encapsular código reutilizável, permitindo o compartilhamento e a utilização em diversos projetos.

-   **Reutilização**

-   **Manutenção**

-   **Colaboração**

-   **Organização**

# Planejamento da Biblioteca

## Etapas do Planejamento

1.  **Defina o objetivo da biblioteca:** O que você pretende alcançar com sua biblioteca?
2.  **Liste as principais funcionalidades:** Quais são os recursos que a biblioteca deve oferecer?
3.  **Planeje a estrutura de módulos e pacotes:** Como você irá organizar o código?

# Configuração do Ambiente

## Github

Diretório para o Github do curso:

github.com/salvnetto/Curso-Pacotes-Python

## Passos para Configuração

1.  **Criar e Abrir um Diretório** 
2.  **Criar Ambiente Virtual:**

``` bash
python -m venv env
```

3.  **Ativar o Ambiente Virtual:**

``` bash
env\Scripts\activate
```

::: callout-important
No Windows, pode ser necessário habilitar a "política de execução". Você pode fazer isso emitindo o seguinte comando no Terminal:
``` bash
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```
:::



Mais informações: [Guia Completo para Usar o Virtual Environment (venv) no Python](https://dev.to/franciscojdsjr/guia-completo-para-usar-o-virtual-environment-venv-no-python-57bo)

## Estrutura de Diretórios

``` bash
minha_biblioteca/
├── minha_biblioteca/
│   ├── __init__.py
│   ├── modulo1.py
├── tests/
├── README.md
├── setup.py
├── LICENSE
```

-   **minha_biblioteca/**: Contém o código principal da biblioteca.

-   **tests/**: Diretório dedicado a testes unitários e integração.

-   **README.md**: Documentação clara e abrangente da biblioteca.

-   **setup.py**: Arquivo de configuração para a instalação da biblioteca.

-   **LICENSE**: Licença que rege o uso do seu pacote.

Mais informações sobre Licenças: [Choose a License](https://choosealicense.com/)

## Inicializando o diretorio

Precisamos inicializar o PYTHONPATH para permitir que o Python encontre nossa biblioteca:

```bash
$env:PYTHONPATH = "caminho\para\seu\diretorio\minha_biblioteca"
```

# Implementação

## Criação de Funções e Classes

Desenvolva suas funções e classes nos módulos. Mantenha a simplicidade e clareza no código:

``` python
def saudacao(nome):
    return f"Olá, {nome}!"
```



## Docstrings

Documente sua função para o usuário final:

``` python
def saudacao(nome: string) -> string:
    """
    Faz uma saudação ao usuário.

    Args:
        nome (string): O primeiro número.

    Returns:
        string: Uma saudação com o nome inserido.
    """
    return f"Olá, {nome}!"
```

Mais informações: [Google Docstrings](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings)

## Exportação de Funções

Exporte funções no `__init__.py` para facilitar o acesso aos usuários da biblioteca:

``` python
from minha_biblioteca.modulo1 import saudacao

__all__ = ['saudacao']
```

## Dependências

Se houver dependências, devemos instalá-las no ambiente virtual:

```bash
pip install numpy
```

Implementar:

```python
import numpy as np

def soma(x, y):
    return np.add(x, y)
```

E em seguida, gerar nosso arquivo de requisitos:

```bash
pip freeze > requirements.txt
```


## Arquivo `setup.py`

Configure a instalação da biblioteca, assegurando que as dependências estejam corretamente especificadas:

``` {.python code-line-numbers="|4-5|6-7|8-10|11-12|13|14-17|18"}
from setuptools import setup, find_packages

setup(
    name='minha_biblioteca',
    version='0.1.0',
    packages=find_packages(),
    install_requires=['pandas'],  # Dependências da biblioteca
    description='Uma biblioteca de exemplo para manipulação de dados',
    long_description=open('README.md').read(),
    long_description_content_type='text/markdown',
    author='Seu Nome',
    author_email='seu_email@example.com',
    url='https://github.com/seu_usuario/minha_biblioteca',
    classifiers=[
        'Programming Language :: Python :: 3',
        'License :: OSI Approved :: MIT License',
    ],
    python_requires='>=3.6',
)
```

# Testes

## Importância dos Testes

Escrever testes unitários é crucial para garantir a funcionalidade e a confiabilidade da biblioteca:

``` python
import unittest
from minha_biblioteca.modulo1 import saudacao

class TestSaudacao(unittest.TestCase):
    def test_saudacao(self):
        self.assertEqual(saudacao("Salvador"), "Olá, Salvador!")
```

# Documentação e Distribuição

## Estrutura do README

Um README bem estruturado é vital para facilitar a adoção da sua biblioteca:

::::: columns
::: {.column width="50%"}
![](img/readme_raw.png)
:::

::: {.column width="50%"}
![](img/readme.png)
:::
:::::

## Distribuição no PyPI

### Passos para Distribuição

-   **Gerar o pacote:** Utilize o comando para criar um pacote instalável.

``` bash
python -m build
```

-   **Publicar no PyPI:** Faça a publicação da sua biblioteca, tornando-a acessível para outros usuários.

``` bash
twine upload dist/*
```

# Conclusão

## Dicas Finais para um Desenvolvimento Eficiente

-   Mantenha o código limpo e comentado.
-   Utilize controle de versão (Git) para rastrear mudanças.
-   Incentive feedback e colabore com a comunidade.
-   Documente sua biblioteca para facilitar a utilização por outros desenvolvedores.

# Perguntas?
